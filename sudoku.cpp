#include <gecode/int.hh>
#include <gecode/search.hh>
#include <gecode/minimodel.hh>

using namespace Gecode;

/**
 * EXAMPLES
 */
static int examples[18][9][9] = {
    {
	{0,0,0, 2,0,5, 0,0,0},
	{0,9,0, 0,0,0, 7,3,0},
	{0,0,2, 0,0,9, 0,6,0},
	
	{2,0,0, 0,0,0, 4,0,9},
	{0,0,0, 0,7,0, 0,0,0},
	{6,0,9, 0,0,0, 0,0,1},
    
	{0,8,0, 4,0,0, 1,0,0},
	{0,6,3, 0,0,0, 0,8,0},
	{0,0,0, 6,0,8, 0,0,0}
    },{
	{3,0,0, 9,0,4, 0,0,1},
	{0,0,2, 0,0,0, 4,0,0},
	{0,6,1, 0,0,0, 7,9,0},

	{6,0,0, 2,4,7, 0,0,5},
	{0,0,0, 0,0,0, 0,0,0},
	{2,0,0, 8,3,6, 0,0,4},
    
	{0,4,6, 0,0,0, 2,3,0},
	{0,0,9, 0,0,0, 6,0,0},
	{5,0,0, 3,0,9, 0,0,8}
    },{
	{0,0,0, 0,1,0, 0,0,0},
	{3,0,1, 4,0,0, 8,6,0},
	{9,0,0, 5,0,0, 2,0,0},
    
	{7,0,0, 1,6,0, 0,0,0},
	{0,2,0, 8,0,5, 0,1,0},
	{0,0,0, 0,9,7, 0,0,4},
    
	{0,0,3, 0,0,4, 0,0,6},
	{0,4,8, 0,0,6, 9,0,7},
	{0,0,0, 0,8,0, 0,0,0}
    },{	// Fiendish puzzle April 21, 2005 Times London
	{0,0,4, 0,0,3, 0,7,0},
	{0,8,0, 0,7,0, 0,0,0},
	{0,7,0, 0,0,8, 2,0,5},
    
	{4,0,0, 0,0,0, 3,1,0},
	{9,0,0, 0,0,0, 0,0,8},
	{0,1,5, 0,0,0, 0,0,4},
    
	{1,0,6, 9,0,0, 0,3,0},
	{0,0,0, 0,2,0, 0,6,0},
	{0,2,0, 4,0,0, 5,0,0}
    },{	// This one requires search
	{0,4,3, 0,8,0, 2,5,0},
	{6,0,0, 0,0,0, 0,0,0},
	{0,0,0, 0,0,1, 0,9,4},
    
	{9,0,0, 0,0,4, 0,7,0},
	{0,0,0, 6,0,8, 0,0,0},
	{0,1,0, 2,0,0, 0,0,3},
    
	{8,2,0, 5,0,0, 0,0,0},
	{0,0,0, 0,0,0, 0,0,5},
	{0,3,4, 0,9,0, 7,1,0}
    },{	// Hard one from http://www.cs.mu.oz.au/671/proj3/node5.html
	{0,0,0, 0,0,3, 0,6,0},
	{0,0,0, 0,0,0, 0,1,0},
	{0,9,7, 5,0,0, 0,8,0},

	{0,0,0, 0,9,0, 2,0,0},
	{0,0,8, 0,7,0, 4,0,0},
	{0,0,3, 0,6,0, 0,0,0},

	{0,1,0, 0,0,2, 8,9,0},
	{0,4,0, 0,0,0, 0,0,0},
	{0,5,0, 1,0,0, 0,0,0}
    },{ // Puzzle 1 from http://www.sudoku.org.uk/bifurcation.htm
	{1,0,0, 9,0,7, 0,0,3},
	{0,8,0, 0,0,0, 0,7,0},
	{0,0,9, 0,0,0, 6,0,0},
	{0,0,7, 2,0,9, 4,0,0},
	{4,1,0, 0,0,0, 0,9,5},
	{0,0,8, 5,0,4, 3,0,0},
	{0,0,3, 0,0,0, 7,0,0},
	{0,5,0, 0,0,0, 0,4,0},
	{2,0,0, 8,0,6, 0,0,9}
    },{ // Puzzle 2 from http://www.sudoku.org.uk/bifurcation.htm
	{0,0,0, 3,0,2, 0,0,0},
	{0,5,0, 7,9,8, 0,3,0},
	{0,0,7, 0,0,0, 8,0,0},
	{0,0,8, 6,0,7, 3,0,0},
	{0,7,0, 0,0,0, 0,6,0},
	{0,0,3, 5,0,4, 1,0,0},
	{0,0,5, 0,0,0, 6,0,0},
	{0,2,0, 4,1,9, 0,5,0},
	{0,0,0, 8,0,6, 0,0,0}
    },{ // Puzzle 3 from http://www.sudoku.org.uk/bifurcation.htm
	{0,0,0, 8,0,0, 0,0,6},
	{0,0,1, 6,2,0, 4,3,0},
	{4,0,0, 0,7,1, 0,0,2},
	{0,0,7, 2,0,0, 0,8,0},
	{0,0,0, 0,1,0, 0,0,0},
	{0,1,0, 0,0,6, 2,0,0},
	{1,0,0, 7,3,0, 0,0,4},
	{0,2,6, 0,4,8, 1,0,0},
	{3,0,0, 0,0,5, 0,0,0}
    },{ // Puzzle 4 from http://www.sudoku.org.uk/bifurcation.htm
	{3,0,5, 0,0,4, 0,7,0},
	{0,7,0, 0,0,0, 0,0,1},
	{0,4,0, 9,0,0, 0,3,0},
	{4,0,0, 0,5,1, 0,0,6},
	{0,9,0, 0,0,0, 0,4,0},
	{2,0,0, 8,4,0, 0,0,7},
	{0,2,0, 0,0,7, 0,6,0},
	{8,0,0, 0,0,0, 0,9,0},
	{0,6,0, 4,0,0, 2,0,8}
    },{ // Puzzle 5 from http://www.sudoku.org.uk/bifurcation.htm
	{0,0,0, 7,0,0, 3,0,0},
	{0,6,0, 0,0,0, 5,7,0},
	{0,7,3, 8,0,0, 4,1,0},
	{0,0,9, 2,8,0, 0,0,0},
	{5,0,0, 0,0,0, 0,0,9},
	{0,0,0, 0,9,3, 6,0,0},
	{0,9,8, 0,0,7, 1,5,0},
	{0,5,4, 0,0,0, 0,6,0},
	{0,0,1, 0,0,9, 0,0,0}
    },{ // Puzzle 6 from http://www.sudoku.org.uk/bifurcation.htm
	{0,0,0, 6,0,0, 0,0,4},
	{0,3,0, 0,9,0, 0,2,0},
	{0,6,0, 8,0,0, 7,0,0},
	{0,0,5, 0,6,0, 0,0,1},
	{6,7,0, 3,0,1, 0,5,8},
	{9,0,0, 0,5,0, 4,0,0},
	{0,0,6, 0,0,3, 0,9,0},
	{0,1,0, 0,8,0, 0,6,0},
	{2,0,0, 0,0,6, 0,0,0}
    },{ // Puzzle 7 from http://www.sudoku.org.uk/bifurcation.htm
	{8,0,0, 0,0,1, 0,4,0},
	{2,0,6, 0,9,0, 0,1,0},
	{0,0,9, 0,0,6, 0,8,0},
	{1,2,4, 0,0,0, 0,0,9},
	{0,0,0, 0,0,0, 0,0,0},
	{9,0,0, 0,0,0, 8,2,4},
	{0,5,0, 4,0,0, 1,0,0},
	{0,8,0, 0,7,0, 2,0,5},
	{0,9,0, 5,0,0, 0,0,7}
    },{ // Puzzle 8 from http://www.sudoku.org.uk/bifurcation.htm
	{6,5,2, 0,4,8, 0,0,7},
	{0,7,0, 2,0,5, 4,0,0},
	{0,0,0, 0,0,0, 0,0,0},
	{0,6,4, 1,0,0, 0,7,0},
	{0,0,0, 0,8,0, 0,0,0},
	{0,8,0, 0,0,4, 5,6,0},
	{0,0,0, 0,0,0, 0,0,0},
	{0,0,8, 6,0,7, 0,2,0},
	{2,0,0, 8,9,0, 7,5,1}
    },{ // Puzzle 9 from http://www.sudoku.org.uk/bifurcation.htm
	{0,0,6, 0,0,2, 0,0,9},
	{1,0,0, 5,0,0, 0,2,0},
	{0,4,7, 3,0,6, 0,0,1},
	{0,0,0, 0,0,8, 0,4,0},
	{0,3,0, 0,0,0, 0,7,0},
	{0,1,0, 6,0,0, 0,0,0},
	{4,0,0, 8,0,3, 2,1,0},
	{0,6,0, 0,0,1, 0,0,4},
	{3,0,0, 4,0,0, 9,0,0}
    },{ // Puzzle 10 from http://www.sudoku.org.uk/bifurcation.htm
	{0,0,4, 0,5,0, 9,0,0},
	{0,0,0, 0,7,0, 0,0,6},
	{3,7,0, 0,0,0, 0,0,2},
	{0,0,9, 5,0,0, 0,8,0},
	{0,0,1, 2,0,4, 3,0,0},
	{0,6,0, 0,0,9, 2,0,0},
	{2,0,0, 0,0,0, 0,9,3},
	{1,0,0, 0,4,0, 0,0,0},
	{0,0,6, 0,2,0, 7,0,0}
    },{ // Puzzle 11 from http://www.sudoku.org.uk/bifurcation.htm
	{0,0,0, 0,3,0, 7,9,0},
	{3,0,0, 0,0,0, 0,0,5},
	{0,0,0, 4,0,7, 3,0,6},
	{0,5,3, 0,9,4, 0,7,0},
	{0,0,0, 0,7,0, 0,0,0},
	{0,1,0, 8,2,0, 6,4,0},
	{7,0,1, 9,0,8, 0,0,0},
	{8,0,0, 0,0,0, 0,0,1},
	{0,9,4, 0,1,0, 0,0,0}
    },{ // From http://www.sudoku.org.uk/discus/messages/29/51.html?1131034031
	{2,5,8, 1,0,4, 0,3,7},
	{9,3,6, 8,2,7, 5,1,4},
	{4,7,1, 5,3,0, 2,8,0},

	{7,1,5, 2,0,3, 0,4,0},
	{8,4,9, 6,7,5, 3,2,1},
	{3,6,2, 4,1,0, 0,7,5},

	{1,2,4, 9,0,0, 7,5,3},
	{5,9,3, 7,4,2, 1,6,8},
	{6,8,7, 3,5,1, 4,9,2}
    }
};


class Sudoku : public Space {
protected:
    int example_id;
    IntVarArray l;

public:
    Sudoku(int example_id) : example_id(example_id), l(*this, 81, 1, 9) {
        Matrix<IntVarArray> matrix(l, 9, 9);

        // Predefined values
        for (int i = 0; i < 9; ++i) {
            for (int j = 0; j < 9; ++j) {
                if (examples[example_id][j][i] != 0) {
                    rel(*this, matrix(j, i), IRT_EQ, examples[example_id][j][i]);
                }
            }
        }

        // Row and Col
        for (int i = 0; i < 9; ++i) {
            distinct(*this, matrix.row(i), ICL_DEF);
            distinct(*this, matrix.col(i), ICL_DEF);
        }

        // Quadrants
        for (int i = 0; i < 9; i += 3) {
            for (int j = 0; j < 9; j += 3) {
                distinct(*this, matrix.slice(i, i+3, j, j+3), ICL_DEF);
            }
        }

        // Branch
        branch(*this, l, INT_VAR_SIZE_MIN, INT_VAL_MIN);
    }

    Sudoku(bool share, Sudoku & s) : Space(share, s) {
        l.update(*this, share, s.l);
    }

    virtual Space* copy(bool share) {
        return new Sudoku(share, *this);
    }

    void print(void) const {
        for (int i = 0; i < 9; ++i) {
            for (int j = 0; j < 9; ++j) {
                if (l[i].assigned()) {
                    std::cout << l[j * 9 + i] << " ";
                } else {
                    std::cout << "X ";
                }
                if ((j+1) % 3 == 0) {
                    std::cout << " ";
                }
            }
            if ((i+1) % 3 == 0) {
                std::cout << std::endl;
            }
            std::cout << std::endl;
        }
        std::cout << std::endl;
    }
};

// main function
int main(int argc, char* argv[]) {
    for (int i = 0; i < 18; ++i) {
        std::cout << "Example: " << (i+1) << std::endl;
        Sudoku* initial = new Sudoku(i);
        DFS<Sudoku> search(initial);
        delete initial;
        if (Sudoku* solution = search.next()) {
            solution->print();
            delete solution;
        } else {
            std::cout << "No solution" << std::endl;
        }
    }
    return 0;
}


